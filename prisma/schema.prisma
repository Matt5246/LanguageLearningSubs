// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  password      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subtitles     Subtitle[]
  accounts      Account[]
  sessions      Session[]
  HardWord      HardWord[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subtitle {
  SubtitleId    String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  youtubeUrl    String?
  subtitleTitle String?
  episode       Int?
  sourceLang    String?
  targetLang    String?
  subtitleData  SubtitleData[]
  hardWords     HardWord[]
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([subtitleTitle, episode, userId])
}

model SubtitleData {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  subtitleDataId String?   @db.ObjectId
  text           String?
  translation    String?
  end            Float?
  start          Float?
  Subtitle       Subtitle? @relation(fields: [subtitleDataId], references: [SubtitleId], onDelete: Cascade)

  @@unique([text, start, subtitleDataId])
}

model HardWord {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  hardWordId  String?    @db.ObjectId
  word        String?
  translation String?
  pos         String? //Part of speech
  lemma       String?
  repetitions Int?
  dueDate     DateTime? // Date for next review
  createdAt   DateTime?  @default(now())
  learnedAt   DateTime?
  userId      String?    @db.ObjectId
  sentences   Sentence[]
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Subtitle    Subtitle?  @relation(fields: [hardWordId], references: [SubtitleId], onDelete: Cascade)

  @@unique([word, userId])
}

model Sentence {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sentenceId  String   @db.ObjectId
  sentence    String
  translation String?
  hardWords   HardWord @relation(fields: [sentenceId], references: [id], onDelete: Cascade)
}
