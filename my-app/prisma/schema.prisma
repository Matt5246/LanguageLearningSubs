// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime?  @default(now())
  updatedAt      DateTime?  @updatedAt
  subtitles      Subtitle[]
  accounts       Account[]
}

model Subtitle {
  SubtitleId    String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  youtubeUrl    String?        @unique
  subtitleTitle String?
  subtitleData  SubtitleData[]
  hardWords     hardWords[]
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([subtitleTitle, userId])
}

model hardWords {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  hardWordId  String?   @db.ObjectId
  word        String?
  translation String?
  pos         String? //Part of speech
  Subtitle    Subtitle? @relation(fields: [hardWordId], references: [SubtitleId], onDelete: Cascade)

  @@unique([word])
}

model SubtitleData {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  subtitleDataId String?   @db.ObjectId
  text           String?
  translation    String?
  duration       Int?
  offset         Int?
  Subtitle       Subtitle? @relation(fields: [subtitleDataId], references: [SubtitleId], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
